{
  "apiFile": "paths/paths.json",
  "patches": [
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1abc" }],
      "tests": {
        "description": "path with single non-parameterized segment (/abc) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~11" }],
      "tests": {
        "description": "path with single non-parameterized segment (/1) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1~1abc" }],
      "tests": {
        "description": "path with neither parameterized nor non-parameterized segment (//abc) is invalid",
        "result": {
          "isValid": false,
          "errors": ["Empty path segments at paths/paths.json#['//abc']"]
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1abc~1" }],
      "tests": {
        "description": "path with single non-parameterized segment with trailing slash (/abc/) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1{def}" }],
      "tests": {
        "description": "path with single non-prefixed parameterized segment (/{def}) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1{def}~1" }],
      "tests": {
        "description": "path with single non-prefixed parameterized segment with trailing slash (/{def}/) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1{_def}" }],
      "tests": {
        "description": "path with parameter name starting with an underscore (/{_def}) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1{_def1_h2}" }],
      "tests": {
        "description":
          "path with parameter name containing a digit in second or later position with underscores (/{_def1_h2}) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1g{def}" }],
      "tests": {
        "description": "path with single prefixed parameterized segment (/g{def}) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1g{def}~1" }],
      "tests": {
        "description": "path with single prefixed parameterized segment with trailing slash (/g{def}/) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1abc~1{def}" }],
      "tests": {
        "description": "path with non-parameterized segment followed by parameterized segment (/abc/{def}) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1{def}~1abc" }],
      "tests": {
        "description": "path with parameterized segment followed by non-parameterized segment (/{def}/abc) is valid",
        "result": {
          "isValid": true
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/abc" }],
      "tests": {
        "description": "path with single non-parameterized segment without leading slash (abc) is invalid",
        "result": {
          "isValid": false,
          "errors": [
            "Unknown property at paths/paths.json# - expected: <none> (e.g. /abc, /{def}, /abc/g{def}), actual: abc"
          ]
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/{def}" }],
      "tests": {
        "description": "path with single non-parameterized segment without leading slash ({def}) is invalid",
        "result": {
          "isValid": false,
          "errors": [
            "Unknown property at paths/paths.json# - expected: <none> (e.g. /abc, /{def}, /abc/g{def}), actual: {def}"
          ]
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1{1def}" }],
      "tests": {
        "description": "path with parameter name starting with a digit (/{1def}) is invalid",
        "result": {
          "isValid": false,
          "errors": [
            "Unknown property at paths/paths.json# - expected: <none> (e.g. /abc, /{def}, /abc/g{def}), actual: /{1def}"
          ]
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1{{def}}" }],
      "tests": {
        "description": "path segment with nested parameterized properties is (/{{def}}) is invalid",
        "result": {
          "isValid": false,
          "errors": [
            "Unknown property at paths/paths.json# - expected: <none> (e.g. /abc, /{def}, /abc/g{def}), actual: /{{def}}"
          ]
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1{def}{ghi}" }],
      "tests": {
        "description": "path segment with multiple parameterized properties is (/{def}{ghi}) is invalid",
        "result": {
          "isValid": false,
          "errors": [
            "Unknown property at paths/paths.json# - expected: <none> (e.g. /abc, /{def}, /abc/g{def}), actual: /{def}{ghi}"
          ]
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1a~1{d" }],
      "tests": {
        "description": "path segment with unbalanced left curly brace is (/a/{d) is invalid",
        "result": {
          "isValid": false,
          "errors": [
            "Unknown property at paths/paths.json# - expected: <none> (e.g. /abc, /{def}, /abc/g{def}), actual: /a/{d"
          ]
        }
      }
    },
    {
      "operations": [{ "op": "move", "from": "/~1", "path": "/~1a~1d}" }],
      "tests": {
        "description": "path segment with unbalanced right curly brace is (/a/d}) is invalid",
        "result": {
          "isValid": false,
          "errors": [
            "Unknown property at paths/paths.json# - expected: <none> (e.g. /abc, /{def}, /abc/g{def}), actual: /a/d}"
          ]
        }
      }
    },
    {
      "operations": [
        {
          "op": "replace",
          "path": "",
          "value": {
            "/a": {
              "$ref": "./pathItem.json#"
            },
            "/{param1}": {
              "$ref": "./pathItem.json#"
            },
            "/a{param1}": {
              "$ref": "./pathItem.json#"
            }
          }
        }
      ],
      "tests": {
        "description": "paths with mix of prefixed and non-prefixed segments is valid",
        "result": {
          "isValid": true
        }
      },
      "patches": [
        {
          "operations": [
            {
              "op": "add",
              "path": "/~1param1~1{param1}",
              "value": {
                "$ref": "./pathItem.json"
              }
            }
          ],
          "tests": {
            "description": "path with same name used as prefix and parameter is valid",
            "result": {
              "isValid": true
            }
          }
        },
        {
          "operations": [
            {
              "op": "add",
              "path": "/~1{param1}~1{param1}",
              "value": {
                "$ref": "./pathItem.json"
              }
            }
          ],
          "tests": {
            "description": "path with single duplicated parameter is invalid",
            "result": {
              "isValid": false,
              "errors": [
                "Multiple uses of same parameter at paths/paths.json#['/{param1}/{param1}'] - duplicate parametrs param1"
              ]
            }
          }
        },
        {
          "operations": [
            {
              "op": "add",
              "path": "/~1{param1}~1{param2}~1{param2}~1{param1}",
              "value": {
                "$ref": "./pathItem.json"
              }
            }
          ],
          "tests": {
            "description": "path with multiple duplicated parameters is invalid",
            "result": {
              "isValid": false,
              "errors": [
                "Multiple uses of same parameter at paths/paths.json#['/{param1}/{param2}/{param2}/{param1}'] - duplicate parametrs param1, param2"
              ]
            }
          }
        },
        {
          "operations": [
            {
              "op": "add",
              "path": "/~1param1",
              "value": {
                "$ref": "./pathItem.json"
              }
            }
          ],
          "tests": {
            "description": "two paths with same name used as prefix in one and parameter in another is valid",
            "result": {
              "isValid": true
            }
          }
        },
        {
          "operations": [
            {
              "op": "add",
              "path": "/~1a~1",
              "value": {
                "$ref": "./pathItem.json"
              }
            }
          ],
          "tests": {
            "description": "non parameterized paths that vary only in trailing slash is invalid",
            "result": {
              "isValid": false,
              "errors": ["Idential paths at paths/paths.json#['/a'] - similar paths /a/"]
            }
          }
        },
        {
          "operations": [
            {
              "op": "add",
              "path": "/~1{param1}~1",
              "value": {
                "$ref": "./pathItem.json"
              }
            }
          ],
          "tests": {
            "description": "parameterized paths that vary only in trailing slash is invalid",
            "result": {
              "isValid": false,
              "errors": ["Idential paths at paths/paths.json#['/{param1}'] - similar paths /{param1}/"]
            }
          }
        },
        {
          "operations": [
            {
              "op": "add",
              "path": "/~1{param2}",
              "value": {
                "$ref": "./pathItem.json"
              }
            }
          ],
          "tests": {
            "description": "parameterized paths that vary only in formal parameter names is invalid",
            "result": {
              "isValid": false,
              "errors": ["Idential paths at paths/paths.json#['/{param1}'] - similar paths /{param2}"]
            }
          }
        }
      ]
    }
  ]
}
